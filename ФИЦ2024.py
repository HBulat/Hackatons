# -*- coding: utf-8 -*-
"""7 case final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BRYtOquzBdO7maWmSlQWmWHHPkx132_d
"""

!pip install pandas numpy matplotlib neuralforecast scikit-learn



import pandas as pd
import numpy as np
from neuralforecast.core import NeuralForecast
from neuralforecast.losses.pytorch import DistributionLoss
from neuralforecast.models import TimesNet
from datetime import datetime
from neuralforecast import NeuralForecast
from neuralforecast.models import MLP, NBEATS, RNN, TSMixer, NHITS, NBEATSx
from neuralforecast.losses.pytorch import RMSE
from neuralforecast.tsdataset import TimeSeriesDataset
from neuralforecast.losses.numpy import mae
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error
from math import sqrt

def plot_forecast(test, predict):
    """
    Функция для визуализации фактических и предсказанных значений.
    """
    plt.figure(figsize=(200, 100))

    # Фактические значения
    plt.plot(test['ds'], test['value'], label='Фактические значения', color='blue', marker='o')

    # Предсказанные значения TimesNet
    plt.plot(predict['ds'], predict['TimesNet'], label='Предсказанные значения TimesNet', color='orange', marker='x')

    # Предсказанные значения NBEATS
    plt.plot(predict['ds'], predict['NBEATS'], label='Предсказанные значения NBEATS', color='yellow', marker='x')

    # Предсказанные значения MLP
    plt.plot(predict['ds'], predict['MLP'], label='Предсказанные значения MLP', color='black', marker='x')

    # Предсказанные значения RNN
    plt.plot(predict['ds'], predict['RNN'], label='Предсказанные значения RNN', color='green', marker='x')

    # Предсказанные значения NHITS
    plt.plot(predict['ds'], predict['NHITS'], label='Предсказанные значения NHITS', color='grey', marker='x')

    # Предсказанные значения NBEATSx
    plt.plot(predict['ds'], predict['NBEATSx'], label='Предсказанные значения NBEATSx', color='brown', marker='x')

    # Настройка графика
    plt.title('Сравнение фактических и предсказанных значений')
    plt.xlabel('Время (индексы)')
    plt.ylabel('Прогноз')
    plt.legend()
    plt.grid()
    plt.show()

def calculate_rmse(test, predict):
    """
    Функция для вычисления RMSE для различных моделей.
    """
    RMSE_timellm = sqrt(mean_squared_error(test, predict['TimesNet']))
    RMSE_nbeats = sqrt(mean_squared_error(test, predict['NBEATS']))
    RMSE_nbeatsx = sqrt(mean_squared_error(test, predict['NBEATSx']))
    RMSE_mlp = sqrt(mean_squared_error(test, predict['MLP']))
    RMSE_RNN = sqrt(mean_squared_error(test, predict['RNN']))
    RMSE_TSMixer = sqrt(mean_squared_error(test, predict['TSMixer']))
    RMSE_NHITS = sqrt(mean_squared_error(test, predict['NHITS']))

    data = {
        'TimesNet RMSE': [RMSE_timellm],
        'N-BEATS RMSE': [RMSE_nbeats],
        'N-BEATSx RMSE': [RMSE_nbeatsx],
        'MLP RMSE': [RMSE_mlp],
        'RNN RMSE': [RMSE_RNN],
        'TSMixer RMSE': [RMSE_TSMixer],
        'NHITS RMSE': [RMSE_NHITS]
    }

    metrics_df = pd.DataFrame(data=data)
    return metrics_df

data1 = pd.read_csv("data1.csv")
data2 = pd.read_csv("data2.csv")
data3 = pd.read_csv("data3.csv")
data4 = pd.read_csv("data4.csv")
data5 = pd.read_csv("data5.csv")

data1['ds'] = pd.to_datetime(data1['date'])
data2['ds'] = pd.to_datetime(data2['date'])
data3['ds'] = pd.to_datetime(data3['date'])
data4['ds'] = pd.to_datetime(data4['date'])
data5['ds'] = pd.to_datetime(data5['date'])

data1 = data1.drop(columns=['date'])
data2 = data2.drop(columns=['date'])
data3 = data3.drop(columns=['date'])
data4 = data4.drop(columns=['date'])
data5 = data5.drop(columns=['date'])

#маркировка цехов
data1['unique_id'] = "1 цех"

data2['unique_id'] = "2 цех"

data3['unique_id'] = "3 цех"

data4['unique_id'] = "4 цех"

data5['unique_id'] = "5 цех"

print(data1['value'].isnull().sum()) #проверка на NaN значения
print(data2['value'].isnull().sum())
print(data3['value'].isnull().sum())
print(data4['value'].isnull().sum())
print(data5['value'].isnull().sum())



data2['value'] = data2['value'].fillna(data2['value'].rolling(window=2, min_periods=1).mean()) #замена NaN значений на среднее высчитанное по соседним значения

data3['value'] = data3['value'].fillna(data3['value'].rolling(window=2, min_periods=1).mean())
data3['value'] = data3['value'].fillna(data3['value'].rolling(window=2, min_periods=1).mean())

"""#Предсказание с учетом экзоненных факторов"""

df = pd.concat([data1, data2, data3, data4, data5], axis=0)  #объединение данных в один датафрейм

train_df = df.groupby('unique_id').tail(344)

train_df



nbeats = NBEATS(h=30, input_size=60, max_steps=100, loss=RMSE())

rnn = RNN(h=30, input_size=60, max_steps=100, loss=RMSE())

mlp = MLP(h=30, input_size=60, max_steps=100, loss=RMSE())

nbeatsx = NBEATSx(h=30, input_size=60,
                loss=RMSE(),
                scaler_type='robust',
                dropout_prob_theta=0.5,
                max_steps=100,
                val_check_steps=10,
                early_stop_patience_steps=2)

nhits = NHITS(h=30, input_size=60,
                loss=RMSE(),
                scaler_type='robust',
                dropout_prob_theta=0.5,
                max_steps=100,
                val_check_steps=10,
                early_stop_patience_steps=2)

timellm = TimesNet(h=30,
                input_size=60,
                hidden_size = 16,
                conv_hidden_size = 32,
                loss=RMSE(),
                scaler_type='standard',
                learning_rate=1e-3,
                max_steps=100,
                val_check_steps=50,
                early_stop_patience_steps=2)

tsmixer = TSMixer(h=30,
                input_size=60,
                n_series=1,
                n_block=3,
                ff_dim=4,
                dropout=0,
                revin=True,
                scaler_type='standard',
                loss=RMSE(),
                learning_rate=1e-3,
                max_steps=100,
                val_check_steps=50,
                early_stop_patience_steps=2,
                batch_size=30)


nf = NeuralForecast(models=[nbeats, nbeatsx, mlp, nhits, timellm, rnn, tsmixer], freq='D')

nf.fit(df=train_df, val_size=30, time_col='ds', target_col='value')

forecasts = nf.predict()

forecasts = forecasts.reset_index()



# Фильтруем по unique_id
filtered_data1 = forecasts[forecasts['unique_id'] == '1 цех']
Y_test_df_data1 = df[df['unique_id'] == '1 цех']
plot_forecast(Y_test_df_data1.tail(30), filtered_data1)



# Фильтруем по unique_id
filtered_data2 = forecasts[forecasts['unique_id'] == '2 цех']
Y_test_df_data2 = df[df['unique_id'] == '2 цех']
plot_forecast(Y_test_df_data2.tail(30), filtered_data2)

# Фильтруем по unique_id
filtered_data3 = forecasts[forecasts['unique_id'] == '3 цех']
Y_test_df_data3 = df[df['unique_id'] == '3 цех']
plot_forecast(Y_test_df_data3.tail(30), filtered_data3)

# Фильтруем по unique_id
filtered_data4 = forecasts[forecasts['unique_id'] == '4 цех']
Y_test_df_data4 = df[df['unique_id'] == '4 цех']
plot_forecast(Y_test_df_data4.tail(30), filtered_data4)

# Фильтруем по unique_id
filtered_data5 = forecasts[forecasts['unique_id'] == '5 цех']
Y_test_df_data5 = df[df['unique_id'] == '5 цех']
plot_forecast(Y_test_df_data5.tail(30), filtered_data5)



df_fact = pd.read_csv("....csv") #загрузка фактических данных для проверки метрик

predict = forecasts[forecasts['unique_id'] == '#номер цеха']

metrics_df = calculate_rmse(df_fact['value'], predict)
metrics_df

"""#Предсказание для одного ряда"""

#1 цех

nf.fit(df=data1, val_size=30, time_col='ds', target_col='value')
forecasts = nf.predict()

plot_forecast(data1.tail(30), forecasts)

df_fact = pd.read_csv("....csv") #загрузка фактических данных для проверки метрик

metrics_df = calculate_rmse(df_fact['value'], forecasts)
metrics_df

#2 цех

nf.fit(df=data2, val_size=30, time_col='ds', target_col='value')
forecasts = nf.predict()

plot_forecast(data2.tail(30), forecasts)

df_fact = pd.read_csv("....csv") #загрузка фактических данных для проверки метрик

metrics_df = calculate_rmse(df_fact['value'], forecasts)
metrics_df

#3 цех

nf.fit(df=data3, val_size=30, time_col='ds', target_col='value')
forecasts = nf.predict()

plot_forecast(data3.tail(30), forecasts)

df_fact = pd.read_csv("....csv") #загрузка фактических данных для проверки метрик

metrics_df = calculate_rmse(df_fact['value'], forecasts)
metrics_df

#4 цех

nf.fit(df=data4, val_size=30, time_col='ds', target_col='value')
forecasts = nf.predict()

plot_forecast(data4.tail(30), forecasts)

df_fact = pd.read_csv("....csv") #загрузка фактических данных для проверки метрик

metrics_df = calculate_rmse(df_fact['value'], forecasts)
metrics_df

#5 цех

nf.fit(df=data5, val_size=30, time_col='ds', target_col='value')
forecasts = nf.predict()

plot_forecast(data5.tail(30), forecasts)

df_fact = pd.read_csv("....csv") #загрузка фактических данных для проверки метрик

metrics_df = calculate_rmse(df_fact['value'], forecasts)
metrics_df

