# ============================================================
# Программа работает на python 3.9.13 64-bit
# ============================================================

# ---------------- УСТАНОВКА БИБЛИОТЕК -----------------------
# !pip install poppler-utils
# !pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
# !pip install colpali-engine
# !pip install --upgrade byaldi
# !pip install flash-attn
# !pip install pywin32
# !pip install PyPDF2
# !pip install pytesseract
# !pip install Pillow

# ---------------- ИМПОРТЫ -----------------------------------
import os
import win32com.client
import PyPDF2
import pytesseract
import matplotlib.pyplot as plt
from PIL import Image
from pdf2image import convert_from_path
from byaldi import RAGMultiModalModel  # загрузка модели RAG

# ---------------- ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ ---------------------
folder = r''          # Папка с PDF файлами
path_to_index = r''   # Путь к сохраненному индексу

# ---------------- ФУНКЦИИ -----------------------------------

def get_file_metadata(path, filename, metadata):
    """Получение метаданных файлов (Windows Shell)"""
    try:
        if not os.path.isdir(path):
            raise ValueError(f"The specified path does not exist: {path}")
        
        sh = win32com.client.gencache.EnsureDispatch('Shell.Application', 0)
        ns = sh.NameSpace(path)
        if ns is None:
            raise RuntimeError(f"Failed to access namespace for path: {path}")

        item = ns.ParseName(str(filename))
        if item is None:
            raise ValueError(f"File does not exist: {filename}")
        
        file_metadata = {}
        for ind, attribute in enumerate(metadata):
            attr_value = ns.GetDetailsOf(item, ind)
            if attr_value:
                file_metadata[attribute] = attr_value
        return file_metadata
    except Exception as e:
        print(f"Error retrieving metadata for {filename}: {e}")
        return {}

def convert_pdfs_to_images(pdf_folder):
    """Конвертирует PDF в список изображений"""
    pdf_files = [f for f in os.listdir(pdf_folder) if f.endswith(".pdf")]
    all_images = {}
    for doc_id, pdf_file in enumerate(pdf_files):
        pdf_path = os.path.join(pdf_folder, pdf_file)
        images = convert_from_path(pdf_path)
        all_images[doc_id] = images
    return all_images

def extract_text_from_pdf_page(pdf_path, page_num):
    """Извлекает текст с определенной страницы PDF"""
    try:
        with open(pdf_path, 'rb') as file:
            pdf_reader = PyPDF2.PdfReader(file)
            if page_num <= len(pdf_reader.pages):
                page = pdf_reader.pages[page_num - 1]
                return (page.extract_text() or "").strip()
            else:
                return "Страница не найдена"
    except Exception as e:
        return f"Ошибка при извлечении текста: {str(e)}"

def extract_text_with_ocr(image):
    """OCR распознавание текста с изображения"""
    try:
        # pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
        return pytesseract.image_to_string(image, lang='rus+eng').strip()
    except Exception as e:
        return f"Ошибка OCR: {str(e)}"

def extract_text_from_search_results(results, folder, all_images):
    """Извлекает текст из найденных страниц PDF"""
    pdf_files = [f for f in os.listdir(folder) if f.endswith(".pdf")]
    extracted_texts = []
    
    for result in results:
        doc_id = result["doc_id"]
        page_num = result["page_num"]
        score = result.get("score", "N/A")
        
        if doc_id < len(pdf_files):
            pdf_file = pdf_files[doc_id]
            pdf_path = os.path.join(folder, pdf_file)
            
            text = extract_text_from_pdf_page(pdf_path, page_num)
            if len(text) < 50:  # если текста мало → OCR
                try:
                    image = all_images[doc_id][page_num - 1]
                    ocr_text = extract_text_with_ocr(image)
                    if len(ocr_text) > len(text):
                        text = f"[OCR] {ocr_text}"
                except:
                    pass
            
            extracted_texts.append({
                "doc_id": doc_id,
                "pdf_file": pdf_file,
                "page_num": page_num,
                "score": score,
                "text": text
            })
    return extracted_texts

def get_grouped_images(results, all_images):
    """Возвращает изображения страниц из результатов поиска"""
    grouped_images = []
    for result in results:
        doc_id = result["doc_id"]
        page_num = result["page_num"]
        grouped_images.append(all_images[doc_id][page_num - 1]) 
    return grouped_images

def save_results_to_file(extracted_texts, text_query, filename="search_results.txt"):
    """Сохраняет результаты поиска в файл"""
    with open(filename, 'w', encoding='utf-8') as f:
        f.write("РЕЗУЛЬТАТЫ ПОИСКА И ИЗВЛЕЧЕНИЯ ТЕКСТА\n")
        f.write("="*80 + "\n")
        f.write(f"Запрос: {text_query}\n")
        f.write(f"Количество результатов: {len(extracted_texts)}\n\n")
        
        for i, item in enumerate(extracted_texts, 1):
            f.write(f"--- РЕЗУЛЬТАТ {i} ---\n")
            f.write(f"Файл: {item['pdf_file']}\n")
            f.write(f"Страница: {item['page_num']}\n")
            f.write(f"Релевантность: {item['score']}\n")
            f.write(f"Doc ID: {item['doc_id']}\n")
            f.write("-" * 50 + "\n")
            f.write("ТЕКСТ:\n")
            f.write(item['text'] + "\n")
            f.write("-" * 50 + "\n\n")
    print(f"Результаты сохранены в файл: {filename}")

def search_and_display_text(RAG, query, folder, all_images, k=5, show_images=True):
    """Выполняет поиск и отображает текст и страницы"""
    print(f"Поиск по запросу: '{query}'")
    print("="*50)
    
    results = RAG.search(query, k=k)
    texts = extract_text_from_search_results(results, folder, all_images)
    
    # Печать текстов
    for i, item in enumerate(texts, 1):
        print(f"\n РЕЗУЛЬТАТ {i}")
        print(f" Файл: {item['pdf_file']}")
        print(f" Страница: {item['page_num']}")
        print(f" Релевантность: {item['score']}")
        print(" ТЕКСТ:")
        print("-" * 40)
        preview = item['text'][:500] + "..." if len(item['text']) > 500 else item['text']
        print(preview)
        print("-" * 40)
    
    # Показ изображений
    if show_images and len(results) > 0:
        images = get_grouped_images(results, all_images)
        fig, axes = plt.subplots(1, min(len(images), 5), figsize=(20, 8))
        if len(images) == 1:
            axes = [axes]
        for i, ax in enumerate(axes[:len(images)]):
            ax.imshow(images[i])
            ax.set_title(f"{texts[i]['pdf_file'][:20]}...\nСтр {texts[i]['page_num']}")
            ax.axis("off")
        plt.tight_layout()
        plt.show()
    
    return texts

# ---------------- ОСНОВНОЙ СЦЕНАРИЙ -------------------------
if __name__ == '__main__':
    # Метаданные
    metadata = []
    pdf_files = [f for f in os.listdir(folder) if f.endswith(".pdf")]
    for pdf_file in pdf_files:
        meta_fields = ['Name', 'Size', 'Item type', 'Date modified', 'Date created']
        metadata.append(get_file_metadata(folder, pdf_file, meta_fields))

    # Загружаем модель RAG
    RAG = RAGMultiModalModel.from_index(path_to_index)

    # Конвертация PDF → изображения
    all_images = convert_pdfs_to_images(folder)

    # Пример поиска
    text_query = "Финансовые результаты НЛМК"
    results = RAG.search(text_query, k=5)
    extracted_texts = extract_text_from_search_results(results, folder, all_images)

    # Сохраняем результаты
    save_results_to_file(extracted_texts, text_query, "nornikel_search_results.txt")

    # Дополнительный поиск
    search_and_display_text(RAG, "Финансовые результаты", folder, all_images, k=3)
